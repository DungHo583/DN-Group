// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id            String          @id @default(cuid())
  userName      String          @unique
  password      String
  hashPassword  String
  // 
  role          RoleAccountEnum @default(USER)
  //
  accounts      Account[]
  sessions      Session[]
  userId        String          @unique
  user          User            @relation(fields: [userId], references: [id])
  status        Boolean         @default(true)
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userAccountId     String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken  String      @unique
  userAccountId String
  expires       DateTime
  user          UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userAccountId        String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@id([userAccountId, credentialID])
}

model Department {
  id      String  @id @default(cuid())
  name    String
  owner   String
  address String?
  phone   String?
  status  Boolean @default(true)
}

enum RoleAccountEnum {
  USER
  ADMIN
  ROOT
}

enum TypeUserEnum {
  TEACHER
  STUDENT
  NORMAL
}

model User {
  id          String       @id @default(cuid())
  name        String
  birthday    String?
  sex         String?
  email       String       @unique
  phone       String?
  avatar      String?
  address     String?
  parentInfo  Json?
  note        String?
  type        TypeUserEnum @default(NORMAL)
  UserAccount UserAccount?
  status      Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
